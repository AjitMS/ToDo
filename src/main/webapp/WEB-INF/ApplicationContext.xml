<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Add support for component scanning -->
	<context:component-scan base-package="com.bridgeit" />

	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven />

	<task:annotation-driven />


	<mvc:resources location="/node_modules/" mapping="/node_modules/**" />
	<mvc:resources location="/script/" mapping="/script/**" />
	<mvc:resources location="/templates/" mapping="/templates/**" />
	<mvc:resources location="/CSS/" mapping="/CSS/**" />
	<mvc:resources location="/controllers/" mapping="/controllers/**" />
	<mvc:resources location="/services/" mapping="/services/**" />
	<mvc:resources location="/img/" mapping="/img/**" />


	<!-- Define Spring MVC view resolver -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/views/" /> <property name="suffix" 
		value=".jsp" /> </bean> -->
	<!-- Step 1: Define Database DataSource / connection pool -->
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/ToDoUsers?useSSL=false" />
		<property name="user" value="root" />
		<property name="password" value="root" />

		<!-- these are connection pool properties for C3P0 -->
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="30000" />
	</bean>

	<!-- Step 2: Setup Hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="com.bridgeit.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- Create Table if not exists -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<!-- Step 3: Setup Hibernate transaction manager -->
	<bean id="myTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Step 4: Enable configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="myTransactionManager" />

	<!-- Add support for reading web resources: css, images, js, etc ... -->
	<!-- <mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources> -->

	<!-- Step 5: Add beans to enable Email Verification -->
	<!--<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="smtp.gmail.com" /> <property name="username" 
		value="ajitshikalgar786@gmail.com" /> <property name="password" value="" 
		/> <property name="javaMailProperties"> <props> <prop key="mail.smtp.auth">true</prop> 
		<prop key="mail.smtp.socketFactory.port">465</prop> <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> 
		<prop key="mail.smtp.port">465</prop> </props> </property> </bean> -->

	<!-- <bean id="verifyEmail" class="com.bridgeit.emailUtility.EmailVerification"> 
		<property name="mailSender" ref="mailSender" /> </bean> -->

	<!-- turn on declarative caching -->
	<cache:annotation-driven />

	<!-- Jedis Not needed anymore -->
	<!-- Jedis ConnectionFactory -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="127.0.0.1" p:port="6379" p:use-pool="true"></bean>

	<!-- declare Redis Cache template -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory"></bean>

	<!-- declare Redis Cache Manager -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
		c:redis-operations-ref="redisTemplate"></bean>

	<!-- Add MVC Interceptors -->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/usernotes/**" />
			<bean id="requestInterceptor" class="com.bridgeit.filter.RequestInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

</beans>